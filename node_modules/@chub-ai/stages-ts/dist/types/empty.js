var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React from "react";
/***
 @description An empty stage, that may be useful to extend when making tools.
 ***/
export class EmptyStage {
    afterResponse(botMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return {};
        });
    }
    beforePrompt(inputMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return {};
        });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            return {};
        });
    }
    render() {
        return React.createElement(React.Fragment, null);
    }
    setState(state) {
        return __awaiter(this, void 0, void 0, function* () {
            return;
        });
    }
}
