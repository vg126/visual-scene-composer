import { MockGenerator, LiveGenerator } from "../services/generation-service";
import { LiveMessenger, MockMessenger } from "../services/messaging-service";
/***
 What must be implemented by a stage.
 It will run as a React stage inside of an iFrame.

 @about StateType
  The type that this stage persists message-level state in.
  This is primarily for readability, and not enforced.
 @description This type is saved in the database after each message,
  which makes it ideal for storing things like positions and statuses,
  but not for things like history, which is best managed ephemerally
  in the internal state of the ChubStage class itself.

 @about ConfigType
  The type of the stage-specific configuration of this stage.
 @description This is for things you want people to be able to configure,
  like background color.
 ***/
export class StageBase {
    constructor(data) {
        /***
         This is the first thing called in the stage,
         to create an instance of it.
         The definition of InitialData is at @link https://github.com/CharHubAI/chub-stages-ts/blob/main/src/types/initial.ts
         Character at @link https://github.com/CharHubAI/chub-stages-ts/blob/main/src/types/character.ts
         User at @link https://github.com/CharHubAI/chub-stages-ts/blob/main/src/types/user.ts
         ***/
        if (data.environment == 'staging' || data.environment == 'production') {
            this.generator = new LiveGenerator();
            this.messenger = new LiveMessenger();
        }
        else {
            this.generator = new MockGenerator();
            this.messenger = new MockMessenger();
        }
    }
}
