import { sendMessageAndAwait } from "./messaging";
import { MESSAGING_REQUESTS } from "../types/messaging/constants";
export class LiveMessenger {
    impersonate(impersonationRequest) {
        return sendMessageAndAwait(MESSAGING_REQUESTS.IMPERSONATE, impersonationRequest);
    }
    updateChatState(chatState) {
        return sendMessageAndAwait(MESSAGING_REQUESTS.CHAT_STATE, chatState);
    }
    updateEnvironment(environmentUpdateRequest) {
        return sendMessageAndAwait(MESSAGING_REQUESTS.ENVIRONMENT, environmentUpdateRequest);
    }
    nudge(nudgeRequest) {
        return sendMessageAndAwait(MESSAGING_REQUESTS.NUDGE, nudgeRequest);
    }
}
export class MockMessenger {
    impersonate(impersonationRequest) {
        return Promise.resolve({ success: true, error: null, identity: 'fakeid' });
    }
    updateChatState(chatState) {
        return Promise.resolve({ success: true, error: null });
    }
    updateEnvironment(environmentUpdateRequest) {
        return Promise.resolve({ success: true, error: null });
    }
    nudge(nudgeRequest) {
        return Promise.resolve({ success: true, error: null, identity: 'fakeid' });
    }
}
