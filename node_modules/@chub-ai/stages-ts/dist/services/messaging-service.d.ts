import { MessagingService } from "../types/messaging/service";
import { EnvironmentRequest, ImpersonateRequest, NudgeRequest } from "../types/messaging/request";
import { MessageResponse, MessagingResponse } from "../types/messaging/response";
export declare class LiveMessenger implements MessagingService<any> {
    impersonate(impersonationRequest: Partial<ImpersonateRequest>): Promise<MessageResponse>;
    updateChatState(chatState: any): Promise<MessagingResponse>;
    updateEnvironment(environmentUpdateRequest: Partial<EnvironmentRequest>): Promise<MessagingResponse>;
    nudge(nudgeRequest: Partial<NudgeRequest>): Promise<MessageResponse>;
}
export declare class MockMessenger implements MessagingService<any> {
    impersonate(impersonationRequest: Partial<ImpersonateRequest>): Promise<MessageResponse>;
    updateChatState(chatState: any): Promise<MessagingResponse>;
    updateEnvironment(environmentUpdateRequest: Partial<EnvironmentRequest>): Promise<MessagingResponse>;
    nudge(nudgeRequest: Partial<NudgeRequest>): Promise<MessageResponse>;
}
