var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CHUBBY_KITTY, GENERATION_REQUESTS } from "../types/generation/constants";
import { sendMessageAndAwait } from "./messaging";
import { FFmpeg } from "@ffmpeg/ffmpeg";
import { DEFAULT_ANIMATION_REQUEST, DEFAULT_BACKGROUND_REMOVAL_REQUEST, DEFAULT_IMAGE_TO_IMAGE_REQUEST, DEFAULT_INPAINT_REQUEST } from "../types/generation/defaults";
export class LiveGenerator {
    /***
     Requests a newly generated image from the API.
     ***/
    makeImage(textToImageRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.TEXT2IMAGE, textToImageRequest);
    }
    /***
     Requests an image generated based off of an original source image from the API.
     ***/
    imageToImage(imageToImageRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.IMAGE2IMAGE, imageToImageRequest);
    }
    /***
     Requests an animation of an existing image.
     ***/
    animateImage(animateImageRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.ANIMATE, animateImageRequest, 600);
    }
    inpaintImage(inpaintRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.INPAINT, inpaintRequest);
    }
    removeBackground(removeRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.REMOVE_BG, removeRequest);
    }
    makeVideo(textToVideoRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.TEXT2VIDEO, textToVideoRequest);
    }
    makeMusic(textToMusicRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.TEXT2MUSIC, textToMusicRequest);
    }
    makeSound(foleyRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.FOLEY, foleyRequest);
    }
    speak(textToSpeechRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.TEXT2SPEECH, textToSpeechRequest);
    }
    textGen(textGenRequest) {
        return sendMessageAndAwait(GENERATION_REQUESTS.TEXT2TEXT, textGenRequest);
    }
}
export class MockGenerator {
    makeImage(textToImageRequest) {
        return new Promise((resolve) => {
            resolve({ url: CHUBBY_KITTY, seed: 0 });
        });
    }
    imageToImage(imageToImageRequest) {
        return new Promise((resolve, _reject) => {
            imageToImageRequest = Object.assign(Object.assign({}, DEFAULT_IMAGE_TO_IMAGE_REQUEST), imageToImageRequest);
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            if (!ctx) {
                resolve(null);
                return;
            }
            canvas.style.display = 'none';
            const image1 = new Image();
            const image2 = new Image();
            image1.onload = () => {
                canvas.width = image1.width;
                canvas.height = image1.height;
                ctx.drawImage(image1, 0, 0);
                image2.onload = () => {
                    ctx.globalAlpha = imageToImageRequest.strength;
                    ctx.drawImage(image2, 0, 0, canvas.width, canvas.height);
                    ctx.globalAlpha = 1;
                    const mixedImageUrl = canvas.toDataURL();
                    resolve({ url: mixedImageUrl, seed: 0 });
                    canvas.width = 0;
                    canvas.height = 0;
                    canvas.remove();
                };
                image2.onerror = (error) => {
                    resolve(null);
                };
                image2.src = CHUBBY_KITTY;
            };
            image1.onerror = (error) => {
                resolve(null);
            };
            image1.src = imageToImageRequest.image;
        });
    }
    convertFileToBase64(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const arrayBuffer = yield file.arrayBuffer();
            let binary = '';
            const bytes = new Uint8Array(arrayBuffer);
            const len = bytes.byteLength;
            for (let i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        });
    }
    animateImage(animateImageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                animateImageRequest = Object.assign(Object.assign({}, DEFAULT_ANIMATION_REQUEST), animateImageRequest);
                const ffmpeg = new FFmpeg();
                yield ffmpeg.load();
                let inputFileName = 'image.png';
                if (animateImageRequest.image.includes('https:')) {
                    const chunks = animateImageRequest.image.split('/');
                    inputFileName = chunks[chunks.length - 1];
                }
                const outputFileName = 'output.mp4';
                const imageData = yield fetch(animateImageRequest.image).then((response) => response.arrayBuffer());
                yield ffmpeg.writeFile(inputFileName, new Uint8Array(imageData));
                yield ffmpeg.exec(['-i', inputFileName,
                    '-vf', 'rotate=angle=45*sin(t/2):fillcolor=none,scale=w=iw/2:h=ih/2',
                    '-t', '3',
                    '-c:v', 'libx264',
                    '-pix_fmt', 'yuv420p',
                    outputFileName]);
                const videoData = yield ffmpeg.readFile(outputFileName);
                const base64String = yield this.convertFileToBase64(videoData);
                yield ffmpeg.unmount(inputFileName);
                yield ffmpeg.unmount(outputFileName);
                return { url: `data:video/mp4;base64,${base64String}`, seed: 0 };
            }
            catch (except) {
                console.error(`Unexpected error making mock video. Are you on an older browser? Error: ${except}`);
                return null;
            }
        });
    }
    inpaintImage(inpaintRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            inpaintRequest = Object.assign(Object.assign({}, DEFAULT_INPAINT_REQUEST), inpaintRequest);
            if (inpaintRequest.mask == null) {
                return Promise.resolve({ url: CHUBBY_KITTY, seed: 0 });
            }
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const image = new Image();
            image.src = inpaintRequest.image;
            yield new Promise((resolve) => (image.onload = resolve));
            canvas.width = image.width;
            canvas.height = image.height;
            ctx.drawImage(image, 0, 0);
            const mask = new Image();
            mask.src = inpaintRequest.mask;
            yield new Promise((resolve) => (mask.onload = resolve));
            ctx.globalCompositeOperation = 'destination-in';
            ctx.drawImage(mask, 0, 0, canvas.width, canvas.height);
            const kittyImage = new Image();
            kittyImage.src = CHUBBY_KITTY;
            yield new Promise((resolve) => (kittyImage.onload = resolve));
            ctx.globalCompositeOperation = 'source-over';
            ctx.drawImage(kittyImage, 0, 0, canvas.width, canvas.height);
            const dataUrl = canvas.toDataURL();
            return { url: dataUrl, seed: 0 };
        });
    }
    removeBackground(removeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            removeRequest = Object.assign(Object.assign({}, DEFAULT_BACKGROUND_REMOVAL_REQUEST), removeRequest);
            const image = removeRequest.image;
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            img.src = image;
            yield new Promise((resolve) => (img.onload = resolve));
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            // Make 50 pixels transparent along every edge
            const edgeSize = 50;
            // Top edge
            for (let y = 0; y < edgeSize; y++) {
                for (let x = 0; x < canvas.width; x++) {
                    const index = (y * canvas.width + x) * 4;
                    data[index + 3] = 0; // Set alpha channel to 0 (transparent)
                }
            }
            // Bottom edge
            for (let y = canvas.height - edgeSize; y < canvas.height; y++) {
                for (let x = 0; x < canvas.width; x++) {
                    const index = (y * canvas.width + x) * 4;
                    data[index + 3] = 0;
                }
            }
            // Left edge
            for (let x = 0; x < edgeSize; x++) {
                for (let y = 0; y < canvas.height; y++) {
                    const index = (y * canvas.width + x) * 4;
                    data[index + 3] = 0;
                }
            }
            // Right edge
            for (let x = canvas.width - edgeSize; x < canvas.width; x++) {
                for (let y = 0; y < canvas.height; y++) {
                    const index = (y * canvas.width + x) * 4;
                    data[index + 3] = 0;
                }
            }
            ctx.putImageData(imageData, 0, 0);
            const dataUrl = canvas.toDataURL();
            return { url: dataUrl, seed: 0 };
        });
    }
    makeVideo(textToVideoRequest) {
        return Promise.resolve({
            seed: 0, url: "https://avatars.charhub.io/79b2188d-293d-42cb-ab50-fddbce4b28b9.gif"
        });
    }
    makeMusic(textToMusicRequest) {
        return Promise.resolve({ seed: 0, url: "https://media.chub.ai/FadingMemories.mp3" });
    }
    makeSound(foleyRequest) {
        return Promise.resolve({ seed: 0, url: "https://media.chub.ai/rain-and-thunder-16705.mp3" });
    }
    speak(textToSpeechRequest) {
        return Promise.resolve({ seed: 0, url: "https://media.chub.ai/ElevenLabs_2024-04-27T03%2023%2053_D_ivc_s50_sb79_se26_b_m2.mp3" });
    }
    textGen(textGenRequest) {
        return Promise.resolve({ result: 'A default text response.' });
    }
}
